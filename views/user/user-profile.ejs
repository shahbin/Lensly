<%- include("../../views/partials/user/header") %>


<body>
  <section class="breadcrumb" style="margin-bottom: 15px; margin-top: -20px;"> 
    <ul class="breadcrumb__list flex " style="width:160px; padding-right: 31px;"> 
      <li><a href="/" class="breadcrumb__link">Home</a></li> 
      <li><span class="breadcrumb__link" style="padding-right: 4px;">></span></li> 
      <li><span class="breadcrumb__link" style="padding-right: 14px;">Profile </span></li> 
    </ul> 
  </section>
  <header class="header">
    <div class="container">
        <h1 class="welcome-text" id="welcomeText">Welcome back, <%= user.name %>!</h1>
        <div class="date-time" id="dateTime"></div>
    </div>
</header>



<main class="container">
    <div class="dashboard-grid">
        <div class="dashboard-item" data-type="profile">
            <div class="icon-wrapper purple">
                <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="12" cy="8" r="4"/>
                    <path d="M20 21a8 8 0 1 0-16 0"/>
                </svg>
            </div>
            <h3>Profile</h3>
            <p>View and edit your profile</p>
        </div>
          <div class="dashboard-item" data-type="address">
              <div class="icon-wrapper pink">
                  <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/>
                      <polyline points="9 22 9 12 15 12 15 22"/>
                  </svg>
              </div>
              <h3>Address</h3>
              <p>Manage your addresses</p>
          </div>
          
          <div class="dashboard-item" data-type="orders">
              <div class="icon-wrapper gold">
                  <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M21 8H3m4 8h10M7 4h10l2 4v10a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V8l2-4z"/>
                  </svg>
              </div>
              <h3>Orders</h3>
              <p>Track your orders</p>
          </div>
          
          <div class="dashboard-item" data-type="wallet">
              <div class="icon-wrapper orange">
                  <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <rect x="2" y="4" width="20" height="16" rx="2"/>
                      <path d="M12 8v8m-4-4h8"/>
                  </svg>
              </div>
              <h3>Wallet</h3>
              <p>Check your balance</p>
          </div>
          
          <div class="dashboard-item" data-type="history">
              <div class="icon-wrapper cyan">
                  <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M12 20V4m-7 4l7-4 7 4M5 16l7 4 7-4"/>
                  </svg>
              </div>
              <h3>History</h3>
              <p>View transaction history</p>
          </div>
          
          <div class="dashboard-item" data-type="referral">
              <div class="icon-wrapper yellow">
                  <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"/>
                      <path d="M15 2H9a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1z"/>
                  </svg>
              </div>
              <h3>Referral</h3>
              <p>Invite friends</p>
          </div>
      </div>
  </main>

  <!-- Profile Modal -->
  <div class="modal" id="profileModal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>My Profile</h2>
            <button class="close-btn" aria-label="Close" onclick="closeModals()">&times;</button>
        </div>
        
        <div class="modal-body">
            <div class="info-group">
                <label>Name</label>
                <p id="profileName"><%= user.name %></p>
            </div>
            
            <div class="info-group">
                <label>Phone</label>
                <p id="profilePhone"><%= user.phone %></p>
            </div>
            
            <div class="info-group">
                <label>Email</label>
                <p id="profileEmail"><%= user.email %></p>
            </div>
        </div>
        <div class="modal-footer">
            <button class="action-btn" onclick="showEditDetailsModal()">
                <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
                    <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"/>
                </svg>
                Edit Details
            </button>
            
            <button class="action-btn" onclick="showPasswordModal()">
                <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <rect x="3" y="11" width="18" height="11" rx="2" ry="2"/>
                    <path d="M7 11V7a5 5 0 0 1 10 0v4"/>
                </svg>
                Change Password
            </button>
        </div>
    </div>
</div>

  <!-- Edit Field Modal -->
   
  <div class="modal" id="editDetailsModal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Edit Profile Details</h2>
            <button class="close-btn" aria-label="Close">&times;</button>
        </div>
        <form id="editProfileForm">
            <div class="modal-body">
                <div class="form-group">
                    <label for="editName">Name</label>
                    <input type="text" id="editName" name="name" class="form-input" value="<%= user.name %>">
                    <div class="validation-message"></div>
                </div>
                <div class="form-group">
                    <label for="editPhone">Phone</label>
                    <input type="tel" id="editPhone" name="phone" class="form-input" value="<%= user.phone %>">
                    <div class="validation-message"></div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="submit" class="action-btn">Save Changes</button>
                <button type="button" class="action-btn secondary" onclick="closeModals()">Cancel</button>
            </div>
        </form>
    </div>
</div>


<div class="modal" id="changePasswordModal">
  <div class="modal-content">
      <div class="modal-header">
          <h2>Change Password</h2>
          <button type="button" class="close-btn" aria-label="Close">&times;</button>
      </div>
      <form id="changePasswordForm">
          <div class="modal-body">
              <div class="form-group">
                  <label for="currentPassword">Current Password</label>
                  <input type="password" id="currentPassword" name="currentPassword" class="form-input">
                  <div class="validation-message"></div>
              </div>
              <div class="form-group">
                  <label for="newPassword">New Password</label>
                  <input type="password" id="newPassword" name="newPassword" class="form-input">
                  <div class="validation-message"></div>
                  <div class="password-strength"></div>
              </div>
              <div class="form-group">
                  <label for="confirmPassword">Confirm Password</label>
                  <input type="password" id="confirmPassword" name="confirmPassword" class="form-input">
                  <div class="validation-message"></div>
              </div>
          </div>
          <div class="modal-footer">
              <button type="submit" class="action-btn">Update Password</button>
              <button type="button" class="action-btn secondary" onclick="closeModals()">Cancel</button>
          </div>
      </form>
  </div>
</div>


<script>

document.addEventListener('DOMContentLoaded', function() {
    // All your existing modal and datetime code remains the same
    function toggleModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.toggle("active");
        }
    }

    document.querySelectorAll('.dashboard-item').forEach(item => {
        item.addEventListener('click', () => {
            const type = item.getAttribute('data-type');
            if (type === 'profile') {
                toggleModal('profileModal');
            }
        });
    });

    document.querySelectorAll('.close-btn').forEach(button => {
        button.addEventListener('click', () => {
            const modal = button.closest('.modal');
            if (modal) {
                modal.classList.remove('active');
            }
        });
    });

    document.querySelectorAll('.modal').forEach(modal => {
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.classList.remove('active');
            }
        });
    });

    function updateDateTime() {
        const dateTimeElement = document.getElementById('dateTime');
        const now = new Date();
        dateTimeElement.textContent = now.toLocaleString();
    }
    updateDateTime();
    setInterval(updateDateTime, 60000);

// Show the Edit Details Modal
function showEditDetailsModal() { const editModal = document.getElementById('editDetailsModal'); if (editModal) { editModal.style.display = 'block'; } else { console.error('Edit Details Modal not found!'); } } function showPasswordModal() { const passwordModal = document.getElementById('passwordModal'); if (passwordModal) { passwordModal.style.display = 'block'; } else { console.error('Password Modal not found!'); } } document.addEventListener('DOMContentLoaded', function() { const editDetailsButton = document.getElementById('editDetailsButton'); const passwordButton = document.getElementById('passwordButton'); if (editDetailsButton) { editDetailsButton.addEventListener('click', showEditDetailsModal); } else { console.error('Edit Details Button not found!'); } if (passwordButton) { passwordButton.addEventListener('click', showPasswordModal); } else { console.error('Password Button not found!'); } });



// Add Event Listeners for Close Buttons
document.querySelectorAll('.close-btn').forEach(button => {
    button.addEventListener('click', closeModals);
});

    // Updated Edit Profile Form Validation
    const editProfileForm = document.getElementById('editProfileForm');
    if (editProfileForm) {
        editProfileForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            // Clear previous validation messages
            clearValidationMessages(this);
            
            const formData = new FormData(this);
            const data = Object.fromEntries(formData.entries());
            
            // Client-side validation
            let isValid = true;
            
            // Name validation
            if (!data.name.trim()) {
                showValidationError('editName', 'Name is required');
                isValid = false;
            }
            
            // Phone validation
            const phoneRegex = /^\+?[\d\s-]{10,}$/;
            if (!phoneRegex.test(data.phone.replace(/\s+/g, ''))) {
                showValidationError('editPhone', 'Please enter a valid phone number');
                isValid = false;
            }
            
            if (!isValid) return;
            
            try {
                const response = await fetch('/editProfile', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    document.getElementById('profileName').textContent = result.user.name;
                    document.getElementById('profilePhone').textContent = result.user.phone;
                    showMessage(result.message, 'success');
                    closeModals();
                } else {
                    result.errors.forEach(error => {
                        if (error.toLowerCase().includes('name')) {
                            showValidationError('editName', error);
                        } else if (error.toLowerCase().includes('phone')) {
                            showValidationError('editPhone', error);
                        }
                    });
                }
            } catch (error) {
                showMessage('An error occurred', 'error');
            }
        });
    }

    // Updated Password Change Form Validation
    const changePasswordForm = document.getElementById('changePasswordForm');
    if (changePasswordForm) {
        const newPasswordInput = document.getElementById('newPassword');
        if (newPasswordInput) {
            newPasswordInput.addEventListener('input', function() {
                const password = this.value;
                const strength = checkPasswordStrength(password);
                updatePasswordStrength(this, strength);
            });
        }

        changePasswordForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            clearValidationMessages(this);
            
            const formData = new FormData(this);
            const data = Object.fromEntries(formData.entries());
            
            let isValid = true;
            
            if (!data.currentPassword) {
                showValidationError('currentPassword', 'Current password is required');
                isValid = false;
            }
            
            if (!data.newPassword) {
                showValidationError('newPassword', 'New password is required');
                isValid = false;
            } else if (data.newPassword.length < 8) {
                showValidationError('newPassword', 'Password must be at least 8 characters');
                isValid = false;
            }
            
            if (!data.confirmPassword) {
                showValidationError('confirmPassword', 'Please confirm your password');
                isValid = false;
            } else if (data.newPassword !== data.confirmPassword) {
                showValidationError('confirmPassword', 'Passwords do not match');
                isValid = false;
            }
            
            if (!isValid) return;
            
            try {
                const response = await fetch('/changePassword', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showMessage(result.message, 'success');
                    closeModals();
                } else {
                    result.errors.forEach(error => {
                        if (error.toLowerCase().includes('current')) {
                            showValidationError('currentPassword', error);
                        } else if (error.toLowerCase().includes('new')) {
                            showValidationError('newPassword', error);
                        } else if (error.toLowerCase().includes('confirm') || error.toLowerCase().includes('match')) {
                            showValidationError('confirmPassword', error);
                        }
                    });
                }
            } catch (error) {
                showMessage('An error occurred', 'error');
            }
        });
    }

    // Helper Functions
    function showValidationError(fieldId, message) {
        const input = document.getElementById(fieldId);
        const validationDiv = input.nextElementSibling;
        input.classList.add('error');
        validationDiv.textContent = message;
    }

    function clearValidationMessages(form) {
        form.querySelectorAll('.validation-message').forEach(div => div.textContent = '');
        form.querySelectorAll('.form-input').forEach(input => input.classList.remove('error'));
    }

    function updatePasswordStrength(input, strength) {
        const existingIndicator = input.parentElement.querySelector('.password-strength');
        if (existingIndicator) existingIndicator.remove();

        const strengthIndicator = document.createElement('div');
        strengthIndicator.className = 'password-strength';
        
        const strengthTexts = ['Weak', 'Medium', 'Strong'];
        const strengthClasses = ['weak', 'medium', 'strong'];
        
        if (input.value.length > 0) {
            strengthIndicator.textContent = `Password Strength: ${strengthTexts[strength - 1] || 'Very Weak'}`;
            strengthIndicator.className = `password-strength ${strengthClasses[strength - 1] || 'very-weak'}`;
        }
        
        input.parentElement.appendChild(strengthIndicator);
    }

    function checkPasswordStrength(password) {
        let strength = 0;
        if (password.length >= 8) strength++;
        if (/[A-Za-z]/.test(password)) strength++;
        if (/\d/.test(password)) strength++;
        return strength;
    }

    function closeModals() {
        const modals = document.querySelectorAll('.modal');
        modals.forEach(modal => {
            modal.classList.remove('active');
            const form = modal.querySelector('form');
            if (form) {
                form.reset();
                clearValidationMessages(form);
                const strengthIndicator = form.querySelector('.password-strength');
                if (strengthIndicator) {
                    strengthIndicator.remove();
                }
            }
        });
    }

    function showMessage(message, type) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${type}-message notification`;
        messageDiv.textContent = message;
        
        const container = document.querySelector('.container');
        if (container) {
            container.insertBefore(messageDiv, container.firstChild);
            setTimeout(() => messageDiv.remove(), 5000);
        }
    }

    // Check URL for messages on load
    const urlParams = new URLSearchParams(window.location.search);
    const error = urlParams.get('error');
    const success = urlParams.get('success');
    
    if (error) showMessage(decodeURIComponent(error), 'error');
    if (success) {
        showMessage(decodeURIComponent(success), 'success');
        closeModals();
    }
});

</script>

</body>

<%- include("../../views/partials/user/footer") %>





